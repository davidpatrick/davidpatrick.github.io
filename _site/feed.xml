<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dponrails</title>
    <description>Ruby, Angular, Javascript - The Exploration of One Developer</description>
    <link>http://dponrails.com/</link>
    <atom:link href="http://dponrails.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 03 Dec 2014 15:00:30 -0800</pubDate>
    <lastBuildDate>Wed, 03 Dec 2014 15:00:30 -0800</lastBuildDate>
    <generator>Jekyll v2.5.1</generator>
    
      <item>
        <title>Hello, React on Rails!</title>
        <description>&lt;p&gt;React.js&lt;/p&gt;

&lt;h1&gt;Installing React.js&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Add the gem to your gem file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;gem &amp;#39;react-rails&amp;#39;, &amp;#39;~&amp;gt; 1.0.0.pre&amp;#39;, github: &amp;#39;reactjs/react-rails&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the installation script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;rails g react:install&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Include the following in your application.js&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;react&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;react_ujs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Structuring React.js Files&lt;/h1&gt;

&lt;p&gt;Add the following into your application.js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//= require_tree ./react/components&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will allow us to put our react components in &lt;/p&gt;

&lt;p&gt;&lt;code&gt;/app/assets/javascripts/react/components&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;Implementing React.js&lt;/h1&gt;

&lt;p&gt;First we are going to want to create our first React component.  First create  &lt;code&gt;/app/assets/javascripts/react/hello_world.js.jsx&lt;/code&gt;.  Inside of this file lets paste the following code&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/** @jsx React.DOM */&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h3&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Implementing react components in our rails view is very straightforward.  Thanks to the react-rails gem it gives us a nice view helper &lt;code&gt;&amp;lt;%=react_component(&amp;#39;HelloMessage&amp;#39;, name: &amp;#39;world!&amp;#39;)%&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s it!  Save your changes and refresh the page and you should have your first React Component!&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 20:27:00 -0800</pubDate>
        <link>http://dponrails.com/react.js/javascript/2014/12/02/hello-react-on-rails.html</link>
        <guid isPermaLink="true">http://dponrails.com/react.js/javascript/2014/12/02/hello-react-on-rails.html</guid>
        
        
        <category>react.js</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Custom Filters in Angular</title>
        <description>&lt;p&gt;In Angular using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/filter/filter&quot;&gt;filter&lt;/a&gt; in views can be pretty straight forward when wanting to search for key terms, but what about when we want to do some thing a little more involved? What about Filter that does not equal data? In this post I am going to describe how you can build a custom filter that will let us dive a little more into the data.&lt;/p&gt;

&lt;h3&gt;Filtering Out Records&lt;/h3&gt;

&lt;p&gt;Basically to create a custom filter, we create a function that we pass data into and return true or false.  To filter out records that don&amp;#39;t match a specific set of data we need to build a custom function that will evaluate our records and then pass that function into the filter.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s goto our &lt;code&gt;view-controller.js&lt;/code&gt; and add our custom function that will evaluate the records passed into it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeSelectedFriends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFriendOneId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFriendTwoId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are binding our custom function to our $scope variable &lt;code&gt;removeSelectedFriends&lt;/code&gt;.  This function takes a friend object and compares it&amp;#39;s &lt;code&gt;id&lt;/code&gt; against the selected friends and returns true or false. This allows us to prevent our user from selecting the same friend twice.&lt;/p&gt;

&lt;p&gt;In our view we will have:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;friend&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;collection-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;friend in friends | &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;     filter: removeSelectedFriends&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     {{friend.name}}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we bound our function to &lt;code&gt;$scope.removeSelectedFriends&lt;/code&gt;, we can now just pass in removeSelectedFriends to the filter and it will evaluate every recod in the friends collection with our custom function.&lt;/p&gt;

&lt;h3&gt;Adding multiple filters&lt;/h3&gt;

&lt;p&gt;I still want my users to be able to search their friends list, to add additional filters you just separate them with an additional pipe.  My final code looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;friend&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;collection-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;friend in friends&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;     | filter: data.search&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;     | filter: removeSelectedFriends&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     {{friend.name}}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 20 Oct 2014 17:01:00 -0700</pubDate>
        <link>http://dponrails.com/angular/javascript/2014/10/20/angular-custom-filters.html</link>
        <guid isPermaLink="true">http://dponrails.com/angular/javascript/2014/10/20/angular-custom-filters.html</guid>
        
        
        <category>angular</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Octopress? No Thanks.</title>
        <description>&lt;h3&gt;Keep it Simple Stupid&lt;/h3&gt;

&lt;p&gt;When I went down the path of using Jekyll for blogging, I really liked how in control I was of my content.  The source was exactly as I had wrote it, WYWIWYG (what you write is what you get), and every post I wrote in markdown would be pushed to GitHub in its original format.  I was able to edit posts easily from any device right on GitHub.  However, when I switched over to Octopress, for the fancy plugins, I would lose that flexibility and it would ultimately bite me in the ass.&lt;/p&gt;

&lt;h3&gt;Managing Two Repos&lt;/h3&gt;

&lt;p&gt;Using plain jane Jekyll you push markdown files to your GitHub Pages repo and GitHub knows how to do the rest to generate viewable HTML files.  Octopress is sort of counter intuitive, in that it generates HTML out of your Markdown files and puts that into a deploy folder that will be pushed to your GitHub pages repo.  You then have to create a second repo for the source code Octopress uses to generate the HTML.  Now you are managing two repos for the same content.&lt;/p&gt;

&lt;p&gt;Since Octopress has to generate HTML files out of your markdown, this makes editing or adding new posts more cumbersome.  You can no longer use the power of markdown or liquit templates on the fly. No more going to your GitHub repo and editing the files remotely, or adding files remotely.  You now have clone your Octopress source repo and generate the content from there and deploy from there.... &lt;/p&gt;

&lt;p&gt;Needless to say, I am no longer using Octopress.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Now I know there are all sorts of ways around the described problem above, but it&amp;#39;s so much overhead for such a little gain.  Jekyll is lightweight, fast and easy.   Why complicate it with such a bloated framework like Octopress? The answer is, you shouldn&amp;#39;t.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Oct 2014 15:00:00 -0700</pubDate>
        <link>http://dponrails.com/jekyll/ruby/octopress/2014/10/20/octopress-no-thanks.html</link>
        <guid isPermaLink="true">http://dponrails.com/jekyll/ruby/octopress/2014/10/20/octopress-no-thanks.html</guid>
        
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        <category>octopress</category>
        
      </item>
    
      <item>
        <title>Starting a Blog with Jekyll</title>
        <description>&lt;p&gt;When searching where to host our team’s blog we wanted to stay close to the community that we were trying to give back to. &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; immediately stood out and with the cost of $0 it’s perfect.  Github Pages allows us to keep using the same tools we use everyday in Development for Blogging.&lt;/p&gt;

&lt;h2&gt;Where to Start?&lt;/h2&gt;

&lt;p&gt;The first thing you will want to do is choose a static site generator.  To make it easy for you I’ve read through quite a bit material and the top 2 imo are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jekyll (ruby)&lt;/li&gt;
&lt;li&gt;cabin (javascript)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both have their advantages but since I need some material for the next Ruby Meetup we are going to start this blog with using Jekyll.  &lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; is straight forward and easy to follow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  is even easier to install
 &lt;code&gt;gem install jekyll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are a ton of resources and tools from here to get you started with Jekyll.  One of the most common is &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;.  But I like starting from something even more basic.  That’s where I found &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Even more so let’s start from one of its themes &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;. Download the &lt;a href=&quot;https://github.com/poole/hyde/archive/master.zip&quot;&gt;source code&lt;/a&gt; and extract it into our new project.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the file structure.  You will see some files/folders with underscores.  Every thing without an underscore will get copied into to the _site folder on build.&lt;/p&gt;

&lt;p&gt;If you open up /_layouts/post.html  you will see handlebars used for injecting content.  This is using the &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid Markup Language&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;Configuring Poole&lt;/h3&gt;

&lt;p&gt;There are few things we will need to do configure Poole&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, unelss you are using a custom domain is to remove the CNAME file, otherwise edit it with your domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second, let’s set customize the _config.yml to fit our blog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Third, remove the default blog posts under the _posts folder and write your our first post.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! Now run &lt;code&gt;jekyll build&lt;/code&gt; Commit and push!&lt;/p&gt;

&lt;p&gt;You can add &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&quot;&gt;Disqus Comments&lt;/a&gt; and customize it a ton of different ways. Good luck&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Sep 2014 07:34:25 -0700</pubDate>
        <link>http://dponrails.com/jekyll/poole/ruby/2014/09/15/staring-a-blog-with-jekyll.html</link>
        <guid isPermaLink="true">http://dponrails.com/jekyll/poole/ruby/2014/09/15/staring-a-blog-with-jekyll.html</guid>
        
        <category>featured</category>
        
        
        <category>jekyll</category>
        
        <category>poole</category>
        
        <category>ruby</category>
        
      </item>
    
  </channel>
</rss>
